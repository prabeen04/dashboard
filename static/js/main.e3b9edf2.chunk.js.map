{"version":3,"sources":["useData.js","Components/DateRangePicker.js","Components/Chart.js","Components/Table.js","App.js","serviceWorker.js","index.js"],"names":["URI","initialState","isFetching","isFetchingError","allData","data","error","startDate","moment","endDate","reducer","state","action","type","GET_DATA_REQUEST","Object","objectSpread","GET_DATA_SUCCESS","payload","GET_DATA_FAILURE","SET_TIME_RANGE","console","log","setDataByDateRange","newData","filter","item","timestamp","isBetween","push","RangePicker","DatePicker","DateRangePicker","_ref","onChange","react_default","a","createElement","disabledDate","current","endOf","Chart","dataKey","value","emptyText","rest","width","height","objectWithoutProperties","length","es6","aspect","assign","margin","top","right","left","bottom","strokeDasharray","stroke","activeDot","r","empty","description","DataTable","columns","title","dataIndex","key","sorter","b","diff","game","revenue","impressions","render","name","i","table","rowKey","dataSource","pagination","defaultPageSize","showSizeChanger","pageSizeOptions","App","_useData","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","useEffect","fetch","then","res","json","catch","err","useData","skeleton","loading","className","range","map","d","eCPM","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e3b9edf2.chunk.js","sourcesContent":["import React, { useReducer, useEffect } from 'react';\r\nimport moment from 'moment';\r\nconst URI = 'https://www.mocky.io/v2/5cd04a20320000442200fc10';\r\nconst testData = [{\r\n    \"timestamp\": \"2019-04-10\",\r\n    \"game\": \"Callbreak Multiplier\",\r\n    \"revenue\": 25,\r\n    \"impressions\": 1040555\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-10\",\r\n    \"game\": \"World Cricket Championship\",\r\n    \"revenue\": 150,\r\n    \"impressions\": 1140555\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-11\",\r\n    \"game\": \"Callbreak Multiplier\",\r\n    \"revenue\": 140,\r\n    \"impressions\": 1240000\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-11\",\r\n    \"game\": \"World Cricket Championship\",\r\n    \"revenue\": 130,\r\n    \"impressions\": 1100666\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-12\",\r\n    \"game\": \"Callbreak Multiplier\",\r\n    \"revenue\": 150,\r\n    \"impressions\": 1345222\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-12\",\r\n    \"game\": \"World Cricket Championship\",\r\n    \"revenue\": 76,\r\n    \"impressions\": 1000111\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-13\",\r\n    \"game\": \"Callbreak Multiplier\",\r\n    \"revenue\": 50,\r\n    \"impressions\": 1046123\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-13\",\r\n    \"game\": \"World Cricket Championship\",\r\n    \"revenue\": 300,\r\n    \"impressions\": 5280000\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-14\",\r\n    \"game\": \"Callbreak Multiplier\",\r\n    \"revenue\": 50,\r\n    \"impressions\": 1111222\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-14\",\r\n    \"game\": \"World Cricket Championship\",\r\n    \"revenue\": 110,\r\n    \"impressions\": 1240555\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-15\",\r\n    \"game\": \"Callbreak Multiplier\",\r\n    \"revenue\": 95,\r\n    \"impressions\": 1240555\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-15\",\r\n    \"game\": \"World Cricket Championship\",\r\n    \"revenue\": 75,\r\n    \"impressions\": 1240555\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-16\",\r\n    \"game\": \"Callbreak Multiplier\",\r\n    \"revenue\": 85,\r\n    \"impressions\": 1240555\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-16\",\r\n    \"game\": \"World Cricket Championship\",\r\n    \"revenue\": 150,\r\n    \"impressions\": 1240555\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-17\",\r\n    \"game\": \"Callbreak Multiplier\",\r\n    \"revenue\": 100,\r\n    \"impressions\": 1240555\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-17\",\r\n    \"game\": \"World Cricket Championships\",\r\n    \"revenue\": 200,\r\n    \"impressions\": 1240555\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-18\",\r\n    \"game\": \"Callbreak Multiplier\",\r\n    \"revenue\": 500,\r\n    \"impressions\": 5940555\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-18\",\r\n    \"game\": \"World Cricket Championship\",\r\n    \"revenue\": 120,\r\n    \"impressions\": 1240555\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-19\",\r\n    \"game\": \"Callbreak Multiplier\",\r\n    \"revenue\": 150,\r\n    \"impressions\": 1240555\r\n},\r\n{\r\n    \"timestamp\": \"2019-04-19\",\r\n    \"game\": \"World Cricket Championship\",\r\n    \"revenue\": 100,\r\n    \"impressions\": 1240555\r\n}\r\n]\r\nconst initialState = {\r\n    isFetching: false,\r\n    isFetchingError: false,\r\n    allData: [], \r\n    data: [],\r\n    error: null,\r\n    startDate: moment(),\r\n    endDate: moment(),\r\n}\r\n\r\nexport default function useData() {\r\n    const [state, dispatch] = useReducer(reducer, initialState)\r\n    useEffect(() => {\r\n        dispatch({ type: GET_DATA_REQUEST })\r\n        fetch(URI)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                dispatch({ type: GET_DATA_SUCCESS, payload: data })\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                dispatch({ type: GET_DATA_FAILURE, payload: err })\r\n            })\r\n    }, [])\r\n    return { state, dispatch }\r\n}\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case GET_DATA_REQUEST:\r\n            return { ...state, isFetching: true, isFetchingError: false };\r\n        case GET_DATA_SUCCESS:\r\n            return { ...state, isFetching: false, isFetchingError: false, data: action.payload, allData: action.payload };\r\n        case GET_DATA_FAILURE:\r\n            return { ...state, isFetching: false, isFetchingError: true };\r\n        case SET_TIME_RANGE:\r\n            console.log(state, action.payload)\r\n            return {\r\n                ...state,\r\n                startDate: action.payload.startDate,\r\n                endDate: action.payload.endDate,\r\n                data: setDataByDateRange(state.allData, action.payload.startDate, action.payload.endDate)\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\nfunction setDataByDateRange(data, startDate, endDate) {\r\n    console.log(data, startDate, endDate)\r\n    const newData = []\r\n    data.filter(item => {\r\n        if (moment(item.timestamp).isBetween(moment(startDate), moment(endDate))) {\r\n            console.log('inside IF')\r\n            newData.push(item)\r\n        }\r\n        console.log(newData)\r\n    })\r\n    return newData;\r\n}\r\nexport const GET_DATA_REQUEST = 'GET_DATA_REQUEST';\r\nexport const GET_DATA_SUCCESS = 'GET_DATA_SUCCESS';\r\nexport const GET_DATA_FAILURE = 'GET_DATA_FAILURE';\r\nexport const SET_TIME_RANGE = 'SET_TIME_RANGE';","import React from 'react'\r\nimport { DatePicker } from 'antd';\r\nimport moment from 'moment';\r\nconst RangePicker = DatePicker.RangePicker;\r\nconst dateFormat = 'YYYY/MM/DD';\r\n\r\nexport default function DateRangePicker({ onChange }) {\r\n  function disabledDate(current) {\r\n    // Can not select future date\r\n    return current && current > moment().endOf('day');\r\n  }\r\n  return (\r\n    <div>\r\n      <RangePicker\r\n        onChange={onChange}\r\n        disabledDate={disabledDate}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Empty } from \"antd\";\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\r\n} from 'recharts';\r\n\r\nexport default function Chart({ data, dataKey, value, emptyText, width, height, ...rest }) {\r\n  if (!data.length) return <Empty description={emptyText || 'No data'} />\r\n  return (\r\n    <ResponsiveContainer width='100%' aspect={5.0/3.0}>\r\n      <LineChart\r\n        // width={width || 500}\r\n        // height={height || 300}\r\n        data={data}\r\n        margin={{\r\n          top: 5, right: 30, left: 20, bottom: 5,\r\n        }}\r\n        {...rest}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey={dataKey} />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Line type=\"monotone\" dataKey={value} stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n      </LineChart>\r\n    </ResponsiveContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Table } from \"antd\";\r\nimport moment from 'moment';\r\n\r\nexport default function DataTable({ data }) {\r\n  const columns = [\r\n    {\r\n      title: 'Date',\r\n      dataIndex: 'timestamp',\r\n      key: 'timestamp',\r\n      sorter: (a, b) => moment(a.timestamp).diff(moment(b.timestamp))\r\n    },\r\n    {\r\n      title: 'Game',\r\n      dataIndex: 'game',\r\n      key: 'game',\r\n      sorter: (a, b) => a.game - b.game,\r\n    },\r\n    {\r\n      title: 'Revenue',\r\n      dataIndex: 'revenue',\r\n      key: 'revenue',\r\n      sorter: (a, b) => a.revenue - b.revenue,\r\n    },\r\n    {\r\n      title: 'Impressions',\r\n      dataIndex: 'impressions',\r\n      key: 'impressions',\r\n      sorter: (a, b) => a.impressions - b.impressions,\r\n    },\r\n    {\r\n      title: 'eCPM',\r\n      dataIndex: '',\r\n      key: '',\r\n      render: (name, item, i) => (item.revenue / item.impressions) * 1000,\r\n      sorter: (a, b) => (a.revenue / a.impressions) * 1000 - (b.revenue / b.impressions) * 1000,\r\n    },\r\n  ];\r\n  return (\r\n    <div>\r\n      <Table\r\n        rowKey='uid'\r\n        dataSource={data}\r\n        columns={columns}\r\n        onChange={() => { }}\r\n        pagination={{\r\n          defaultPageSize: 5,\r\n          showSizeChanger: true,\r\n          pageSizeOptions: ['5', '10']\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport { Skeleton, Empty } from \"antd\";\nimport useData, { SET_TIME_RANGE } from './useData';\nimport DateRangePicker from \"./Components/DateRangePicker\";\nimport Chart from \"./Components/Chart\";\nimport Table from \"./Components/Table\";\nimport 'antd/dist/antd.css';\nimport './App.css';\n\nfunction App() {\n  const { state, dispatch } = useData()\n  const { isFetching, isFetchingError, data, startDate, endDate, } = state;\n\n  if (isFetching) return <Skeleton loading />\n  // if (isFetchingError) return <Empty description='Error fetching Data' />\n  // if (!data.length) return <Empty description=\"Couldn't any relevent data\" />\n  return (\n    <div className=\"App\">\n    <h1 className='header-text'>Dashboard</h1>\n      <div className=\"datepicker-container\">\n        <DateRangePicker\n          startDate={startDate}\n          endDate={endDate}\n          onChange={(range) => {\n            console.log(range)\n            dispatch({ type: SET_TIME_RANGE, payload: { startDate: range[0], endDate: range[1] } })\n          }}\n        />\n      </div>\n      <div className=\"chart-container\">\n        <Chart\n          data={data && data.map(d => ({ name: d.timestamp, eCPM: (d.revenue / d.impressions) * 1000 }))}\n          dataKey='name'\n          value='eCPM'\n          emptyText='No relevent data found for this date range'\n        />\n      </div>\n      <div className=\"table-container\">\n        <Table\n          data={data}\n        />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}